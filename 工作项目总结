一、自我介绍
你好，我叫屠金鹏，毕业于常熟理工软件工程系 本科。14年来到上海实习，15年毕业进入了一家
旅游互联网工作，也就是我现在的所在的这家公司，从事java的开发工作，期间主要负责旅游线路相关的一些业务开发，工作内容包括商品，价格、订单的相关的一些需求开发，同时也承担一些我们组接口的优化工作，还有一些线上bug的跟踪。平时也比较喜欢看一些技术书籍，最近在研究的是netty。

#优化工作：
(1)线路下单校验优化
 订单参数校验            100ms
 预定商品的价格库存校验    2s
 订单总价计算            2s

问题：校验接口时间较长

解决思路：这3中校验过程相对独立，完全可以采用并行计算的思路 线程池+future
将订单校验的时间，下降到2s左右

方案：将3个校验任务直接投递到线程池，利用CompletionService方式，让主线程按顺序等待获取异步的校验结果；还有一个好处用CompletionService，因为它是按顺序获取校验结果，当提前获取到失败结果的时候，主线程可以立即返回，告知前端用户


(2)旅游线路频道页
问题：首页需要一次性加载特别推荐，销售排行、最新甩卖、最新上线等，差不多一次性需要加载50个产品，假设每个产品加载图片信息、起价信息需要200ms，50产品需要10s，导致首页加载缓慢


#线上bug
(1)有个消息转发的工程，接受主站的mq消息，经常出现消息丢失的问题
(2)有个服务集群中某一台机器假死（能接受外界请求，但是dubbo线程池慢无法处理远程调用），导致前台服务各种超时雪崩
(3)线上tnt_api机器服务cpu一直冲高，大部分cpu冲高都是因为大量循环导致的
   问题：时间段开始日期，结束日期写反了，导致出现死循环或者日期跨度太大不合理，导致循环过大



二、项目经验介绍
#分布式job调度平台
类比ScheduleThreadPool实现，ScheduleThreadPool有一个delaQueue用于存放任务，而调度平台用mysql的一张任务表存储开发在页面上配置的一些定时周期性任务；ScheduleThreadPool中有一些固定的工作者线程负责处理到期的定时任务，而调度平台则由服务集群的各节点扫描任务表，处理到期的任务，

-5大角色
TaskElectionJob【选举】：选举出集群中master节点（可用节点的第一个）
taskScheduleJob【调度】：master节点负责调度任务，将任务通过轮询的方式将任务分配给具体的可用节点，更新用户任务表
taskTickJob【心跳】：每个集群中的节点，定时的报告自身的存活状态，更新task_tick表
taskExecuteJob【执行器】：每个集群节点定时扫描用户表，找到分配的任务投递到节点上的线程池中进行任务的执行
taskGuardJob【守护】：处理用户任务表中运行状态异常的任务

#分布式消息系统
jobClient【生产者】:负责提交任务，提交任务的同时会指定任务执行的消费者节点组
jobTracker【消息队列中间件】：负责将jobClient提交的任务持久化，然后根据任务提交的节点组分配任务到具体的节点机器上。
taskTracker【消费者】：执行节点组，根据自身cpu和内存的使用情况定时的向jobTracker拉取任务，投递到自身线程池中执行


1.线路组合商品价格重构项目
-简介：
价格计算流程按顺序主要【价格消息合并】、【商品结算价计算】、【商品销售价计算入redis】、【销售价计算入库】、【起价计算】这5大模块，通过分布式调度消息系统lts完成整个价格计算的流程扭转，流程中的各个节点任务都是投递到价格服务执行节点组的线程池中执行。

-发现的问题:
(1)打包的酒店商品变价频繁并且按天发送消息、导致trigger表数据量庞大、消费者job来不及
消费，最终导致整个变价过程延时，造成下不了单（下单的时候价格会和供应商提供的价格做下对比）

-解决方案：
(1)将供应商发送来的消息直接入库，存到一张消息trigger表，有固定的几个定时任务负责处理
这些消息，按消息id取模并发分组的去消费这些消息，每个job同一时间处理1000数据，按商品id进行消息的合并，发送变价消息

缺点：消息波峰来的时候，造成trigger表消息量巨大，异步的几个job来不及消费，导致商品变价延时、无法下单；同时还需要一个定时任务不断清理trigger表里的无用数据

-启示：是否消息可以在本地合并？？？本地合并最快？？？

(2)写了一个本地消息合并器
商品变价消息全部投递到这个合并器进行合并处理（按商品id，进行变价时间段合并的这样一次操作）

方案：
（1）用了一个concurrentHashMap存储每个商品id，以及它的一个变价消息合并对象，因为存在并发修改这个同一个商品的合并对象的情况，采用了一个AtomicReference这样一个原子类，通过自旋cas方式进行一个消息合并对象的一次原子更新
 (2)同时有一个定时任务线程池scheduledThreadPool，每隔1分钟，负责将
 concurrentHashMap中存储的每个商品的变价消息合并对象定时发送出去



2.分销酒店、门票、线路产品迁库项目
负责整个项目的技术指导以及线路产品迁库开发工作。负责整个项目的技术指导以及线路产品迁库开发工作。运用动态代理拦截mapper层，通过缓存开关控制访问的数据源，平稳安全地完成整个数据库迁移工作。


3.批量改价项目
运营可以就一个商品针对所有分销商改价，或者一个品类的所有商品针对所有分销商改价。改价的一次操作产生的任务量巨大，耗时长。针对这样的复杂需求，web层通过信号量限制并发，业务层通过固定大小线程池控制任务执行的cpu和内存的压力


4.境外门票订单重构
负责境外门票的订单重构任务。通过责任链的方式编排校验订单、下单的整个流程

-校验订单责任链
(1)校验是否是驴妈妈会员信息
(2)校验供应商商品状态，价格库存

-下单流程责任链
(1)校验订单参数
(2)调用供应商接口
(3)创建分销自己订单
(4)异步同步供应商订单数据





