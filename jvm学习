1.jre jvm jdk
JRE : java运行环境，包括jvm，java核心类库以及一些支持文件

jvm : java虚拟机，是用来加载class文件，解析成自己的指令集，联通上层应用和底层操作系统
做到平台无关性的重要支持；主要有3部分组成：类加载器、运行时数据区、执行引擎；类加载器子系统主要负责解析class文件，生成字节码指令；jvm把一些需要要存储的数据放在运行时数据区中；执行器主要负责执行这些字节码以及本地方法的调用，还有垃圾回收

jdk：java开发工具包

2.java内存结构：
(1)堆
线程共享，分为年轻代（1个eden区 2个survivor区），老年代
主要用来存放对象

(2)方法区（永久代）
线程共享
主要存放类的信息，方法代码，常量池

(3)java栈

(4)本地方法栈

(5)程序计算器

2.判断一个对象是否被回收？---可达性分析算法
算法抽象出一系列GC ROOTS,从这些gc roots出发，无法到达对象，则表示这些对象可以被
回收了。

GC ROOTS:
(1)java栈、本地方法栈中对象的引用
(2)方法区中装载的类上的静态成员变量

3.何时出发GC？
Minor GC触发条件：年轻代eden区满的时候

full gc触发条件：
(1)System.gc(),建议执行full gc，但是并不保证一定执行gc
(2)老年代内存满的时候
(3)方法区内存满的时候
(4)存活的对象到达一定年龄从年轻代进入老年代时，此时老年代可用内存不够时

4.gc垃圾回收算法
分代回收算法：
(1)年轻代 因为大部分对象都是朝生夕灭，采用复制算法，将存活的对象copy到survivor区，清理eden区
(2)老年代
因为老年代里都是存活的对象，所以采用标记-整理的算法回收对象

5.jvm参数
-Xms1024M : 堆的最小值
-Xmx1024M : 堆的最大值
-Xss128k  : 栈内存
-XX:PermSize=13m：永久代初始大小
-XX:MaxPermSize=16m  ： 永久代最大值
-XX:NewSize=1024MB 		: 新生代初始大小
-XX:NewRatio=8		: New和Old的比值1：8
-XX:SurvivorRatio=4 		: Eden和Survivor的比值4:1:1


-XX:+PrintGC				: 输出GC简要的信息
-XX:+PrintGCDetails			: 输出GC详细信息
-XX:+PrintGCTimeStamps		: 输出GC时间戳
-XX:+PrintGCApplicationStoppedTime	: 输出GC暂停时间
-Xlogg 				: 输出到文件



6.类加载机制























